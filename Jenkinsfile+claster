pipeline {
    agent any

    stages {
        stage('Cleanup old containers') {
            steps {
                script {
                    sh 'docker rm -f bek || true'
                    sh 'docker rm -f front || true'
                    sh 'docker rm -f sql111 || true'
                }
            }
        }

        stage('Initialize Swarm') {
            steps {
                script {
                    sh '''
                    if ! docker info | grep -q "Swarm: active"; then
                        docker swarm init --advertise-addr $(ip -o -4 addr show $(ip -o -4 route show to default | awk "{print $9}") | awk "{print $4}" | cut -d"/" -f1)
                    fi
                    '''
                }
            }
        }

        stage('Create Network') {
            steps {
                script {
                    sh 'docker network create --driver overlay mynetwork || true'
                }
            }
        }

        stage('Create Database') {
            steps {
                script {
                    sh '''
                    docker service create --name sql111 \
                        --network mynetwork \
                        -e "ACCEPT_EULA=Y" \
                        -e "MSSQL_SA_PASSWORD=Qwerty-1" \
                        --publish 1433:1433 \
                        mcr.microsoft.com/mssql/server:2022-latest
                    '''
                }
            }
        }

        stage('Wait for SQL Server') {
            steps {
                script {
                    sh '''
                    echo "Waiting for SQL Server to start..."
                    sleep 30
                    until docker exec $(docker ps -q --filter "name=sql111") /opt/mssql-tools/bin/sqlcmd -S localhost -U SA -P 'Qwerty-1' -Q "SELECT 1" > /dev/null 2>&1; do
                        echo "SQL Server is still starting..."
                        sleep 5
                    done
                    echo "SQL Server is up and running!"
                    '''
                }
            }
        }

        stage('Apply Migrations') {
            steps {
                script {
                    sh '''
                    docker exec $(docker ps -q --filter "name=sql111") /opt/mssql-tools/bin/sqlcmd -S localhost -U SA -P 'Qwerty-1' -Q "SELECT 1"
                    docker exec bek dotnet-ef database update --startup-project "ShopApi" --project "DAL/DAL.csproj"
                    '''
                }
            }
        }

        stage('Docker Build') {
            steps {
                script {
                    sh '''
                    docker build -t bek /var/lib/jenkins/workspace/Diplom_moon/BackEnd/Amazon-clone/
                    docker build -t front /var/lib/jenkins/workspace/Diplom_moon/FrontEnd/my-app/
                    '''
                }
            }
        }

        stage('Deploy Stack') {
            steps {
                script {
                    sh 'docker stack deploy -c docker-compose.yml my_stack'
                }
            }
        }
    }
}
