pipeline {
    agent any

    environment {
        NETWORK_NAME = "mynetwork"
        STACK_NAME = "my_stack"
    }

    stages {
        stage('Cleanup old services') {
            steps {
                script {
                    sh '''
                    docker service rm $(docker service ls -q) || true
                    docker stack rm ${STACK_NAME} || true
                    docker network rm ${NETWORK_NAME} || true
                    '''
                }
            }
        }

        stage('Initialize Swarm') {
            steps {
                script {
                    sh '''
                    if ! docker info | grep -q "Swarm: active"; then
                        docker swarm init --advertise-addr $(hostname -I | awk '{print $1}')
                    fi
                    '''
                }
            }
        }

        stage('Create Network') {
            steps {
                script {
                    sh 'docker network create --driver overlay ${NETWORK_NAME} || true'
                }
            }
        }

        stage('Create Database Service') {
            steps {
                script {
                    sh '''
                    docker service create --name sql111 \
                        --network ${NETWORK_NAME} \
                        -e "ACCEPT_EULA=Y" \
                        -e "MSSQL_SA_PASSWORD=Qwerty-1" \
                        --publish 1433:1433 \
                        mcr.microsoft.com/mssql/server:2022-latest
                    '''
                }
            }
        }

        stage('Wait for SQL Server') {
            steps {
                script {
                    sh '''
                    echo "Waiting for SQL Server to start..."
                    sleep 30
                    until docker run --rm --network=${NETWORK_NAME} mcr.microsoft.com/mssql/server:2022-latest /opt/mssql-tools/bin/sqlcmd -S sql111 -U SA -P 'Qwerty-1' -Q "SELECT 1" > /dev/null 2>&1; do
                        echo "SQL Server is still starting..."
                        sleep 5
                    done
                    echo "SQL Server is up and running!"
                    '''
                }
            }
        }

        stage('Docker Build') {
            steps {
                script {
                    sh '''
                    docker build -t bek ./BackEnd/Amazon-clone/
                    docker build -t front ./FrontEnd/my-app/
                    '''
                }
            }
        }

        stage('Push Images to DockerHub') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'eab6834c-3d63-451c-a362-bf326e7b1c6b', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                        sh '''
                        echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin
                        docker tag bek moonyrise/monitor:bek
                        docker push moonyrise/monitor:bek
                        docker tag front moonyrise/monitor:front
                        docker push moonyrise/monitor:front
                        '''
                    }
                }
            }
        }

        stage('Deploy Stack') {
            steps {
                script {
                    sh '''
                    docker stack deploy -c docker-compose.yml ${STACK_NAME}
                    '''
                }
            }
        }

        stage('Verify Deployment') {
            steps {
                script {
                    sh 'docker service ls'
                }
            }
        }
    }
}
